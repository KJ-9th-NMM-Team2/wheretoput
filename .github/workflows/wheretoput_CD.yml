name: CD — deploy on dev→main merge

on:
  workflow_dispatch:
  pull_request:
    branches: ["main"]
    types: [closed]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPO_NEXT: ${{ secrets.ECR_REPO_NEXT }}
  ECR_REPO_SOCKET: ${{ secrets.ECR_REPO_SOCKET }}
  IMAGE_TAG: ${{ github.sha }}

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    if: >-
      ${{ github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true &&
          github.event.pull_request.base.ref == 'main' &&
          github.event.pull_request.head.ref == 'dev' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push Next.js image
        uses: docker/build-push-action@v6
        with:
          context: next
          file: next/Dockerfile.prod
          push: true
          build-args: |
            NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
            NEXT_PUBLIC_IMAGE_BASE_URL=${{ secrets.NEXT_PUBLIC_IMAGE_BASE_URL }}
          tags: |
            ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPO_NEXT }}:${{ github.sha }}
            ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPO_NEXT }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & push NestJS image
        uses: docker/build-push-action@v6
        with:
          context: socket
          file: socket/Dockerfile.prod
          push: true
          tags: |
            ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPO_SOCKET }}:${{ github.sha }}
            ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPO_SOCKET }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-next:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Next.js .env.production
        run: |
          cat > .env.production << 'EOF'
          NODE_ENV=production
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          DATABASE_READONLY_URL=${{ secrets.DATABASE_READONLY_URL }}
          NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
          ECR_REGISTRY=${{ secrets.ECR_REGISTRY }}
          ECR_REPO_NEXT=${{ secrets.ECR_REPO_NEXT }}
          IMAGE_TAG=${{ github.sha }}
          FRONTEND_PORT=3000
          AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          AUTH_GITHUB_ID=${{ secrets.AUTH_GITHUB_ID }}
          AUTH_GITHUB_SECRET=${{ secrets.AUTH_GITHUB_SECRET }}
          AUTH_GOOGLE_ID=${{ secrets.AUTH_GOOGLE_ID }}
          AUTH_GOOGLE_SECRET=${{ secrets.AUTH_GOOGLE_SECRET }}
          REPLICATE_API_TOKEN=${{ secrets.REPLICATE_API_TOKEN }}
          NEXTAUTH_SECRET=${{ secrets.JWT_SECRET }}
          AUTH_TRUST_HOST=true
          IMAGE=latest
          REDIS_CACHE_META_URL=${{ secrets.REDIS_CACHE_META_URL }}
          GLB_REDIS_URL=${{ secrets.GLB_REDIS_URL }}
          USE_REDIS=${{ secrets.USE_REDIS }}
          EOF

      - name: Upload files to Next.js EC2 (via Bastion)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.WTT_NEXT_HOST }}
          username: ubuntu
          key: ${{ secrets.WTT_NEXT_SSH_KEY }}
          source: "docker-compose.next.yml,.env.production"
          target: /home/ubuntu/app/
          timeout: 60s
          proxy_host: ${{ secrets.BASTION_SERVER }}
          proxy_username: ubuntu
          proxy_key: ${{ secrets.BASTION_SSH_KEY }}

      - name: Deploy Next.js on EC2 (via Bastion)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.WTT_NEXT_HOST }}
          username: ubuntu
          key: ${{ secrets.WTT_NEXT_SSH_KEY }}
          proxy_host: ${{ secrets.BASTION_SERVER }}
          proxy_username: ubuntu
          proxy_key: ${{ secrets.BASTION_SSH_KEY }}
          script: |
            docker system prune -f
            set -e
            cd /home/ubuntu/app/
            
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
              docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
            
            export IMAGE_TAG=${{ github.sha }}
            export ECR_REGISTRY=${{ env.ECR_REGISTRY }}
            export ECR_REPO_NEXT=${{ secrets.ECR_REPO_NEXT }}
            
            docker-compose -f docker-compose.next.yml --env-file .env.production pull
            docker-compose -f docker-compose.next.yml --env-file .env.production up -d --remove-orphans
            docker image prune -f

  deploy-nest:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create NestJS .env.production
        run: |
          cat > .env.production << 'EOF'
          NODE_ENV=production
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          DATABASE_READONLY_URL=${{ secrets.DATABASE_READONLY_URL }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          EC2_HOST_NEXT=${{ secrets.EC2_HOST_NEXT }}
          NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          REDIS_URL=${{ secrets.REDIS_URL }}
          ECR_REGISTRY=${{ secrets.ECR_REGISTRY }}
          ECR_REPO_SOCKET=${{ secrets.ECR_REPO_SOCKET }}
          IMAGE_TAG=latest
          EOF

      - name: Upload files to NestJS EC2 (via Bastion)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.WTT_SOCKET_HOST }}
          username: ubuntu
          key: ${{ secrets.WTT_SOCKET_SSH_KEY }}
          source: "docker-compose.socket.yml,.env.production"
          target: /home/ubuntu/app/
          timeout: 60s
          proxy_host: ${{ secrets.BASTION_SERVER }}
          proxy_username: ubuntu
          proxy_key: ${{ secrets.BASTION_SSH_KEY }}
      
      - name: Deploy NestJS on EC2 (via Bastion)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.WTT_SOCKET_HOST }}
          username: ubuntu
          key: ${{ secrets.WTT_SOCKET_SSH_KEY }}
          proxy_host: ${{ secrets.BASTION_SERVER }}
          proxy_username: ubuntu
          proxy_key: ${{ secrets.BASTION_SSH_KEY }}
          script: |
            docker system prune -f
            set -e
            cd /home/ubuntu/app/

            mkdir -p ./temp && chmod 755 ./temp
            
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
              docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
            
            export IMAGE_TAG=${{ github.sha }}
            export ECR_REGISTRY=${{ env.ECR_REGISTRY }}
            export ECR_REPO_SOCKET=${{ secrets.ECR_REPO_SOCKET }}
            
            docker-compose -f docker-compose.socket.yml --env-file .env.production pull
            docker-compose -f docker-compose.socket.yml --env-file .env.production up -d --remove-orphans
            docker image prune -f
            
            if docker-compose -f docker-compose.socket.yml ps socket >/dev/null 2>&1; then
              docker-compose -f docker-compose.socket.yml --env-file .env.production run --rm socket npx prisma migrate deploy || true
            fi
