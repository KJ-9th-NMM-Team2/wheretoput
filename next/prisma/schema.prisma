generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "chat", "furniture", "room"]
}

model chat_messages {
  message_id   String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  chat_room_id String     @db.Uuid
  user_id      String
  content      String
  message_type String?    @default("text") @db.VarChar(20)
  metadata     Json?      @default("{}")
  is_deleted   Boolean?   @default(false)
  created_at   DateTime?  @default(now()) @db.Timestamp(6)
  updated_at   DateTime?  @default(now()) @db.Timestamp(6)
  chat_rooms   chat_rooms @relation(fields: [chat_room_id], references: [chat_room_id], onDelete: Cascade, onUpdate: NoAction)
  user         User       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at], map: "idx_chat_messages_created")
  @@index([chat_room_id], map: "idx_chat_messages_room")
  @@schema("chat")
}

model chat_participants {
  participant_id   String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  chat_room_id     String     @db.Uuid
  user_id          String
  joined_at        DateTime?  @default(now()) @db.Timestamp(6)
  last_read_at     DateTime?  @db.Timestamp(6)
  is_admin         Boolean?   @default(false)
  custom_room_name String?    @db.VarChar(100)
  last_read_id     String?
  is_left          Boolean?   @default(false)
  left_at          DateTime?  @db.Timestamp(6)
  chat_rooms       chat_rooms @relation(fields: [chat_room_id], references: [chat_room_id], onDelete: Cascade, onUpdate: NoAction)
  user             User       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([chat_room_id, user_id])
  @@index([chat_room_id], map: "idx_chat_participants_room")
  @@schema("chat")
}

model chat_rooms {
  chat_room_id      String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String?             @db.VarChar(100)
  description       String?
  creator_id        String
  is_private        Boolean?            @default(false)
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @default(now()) @db.Timestamp(6)
  chat_messages     chat_messages[]
  chat_participants chat_participants[]
  creator           User                @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  rooms             rooms[]

  @@schema("chat")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model categories {
  name        String    @unique @db.VarChar(100)
  description String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  category_id Int       @default(autoincrement())

  @@schema("furniture")
}

model furnitures {
  furniture_id     String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String         @db.VarChar(200)
  description      String?
  length_x         Decimal        @db.Decimal(10, 2)
  length_y         Decimal        @db.Decimal(10, 2)
  length_z         Decimal        @db.Decimal(10, 2)
  image_url        String?
  model_url        String?
  price            Decimal?       @db.Decimal(12, 2)
  brand            String?        @db.VarChar(100)
  is_active        Boolean?       @default(false)
  created_at       DateTime?      @default(now()) @db.Timestamp(6)
  updated_at       DateTime?      @default(now()) @db.Timestamp(6)
  category_id      Int
  cached_model_url String?        @db.VarChar(255)
  is_redis_cached  Boolean?       @default(false)
  room_objects     room_objects[]

  @@schema("furniture")
}

model room_comments {
  comment_id String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  room_id    String    @db.Uuid
  user_id    String
  content    String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  rooms      rooms     @relation(fields: [room_id], references: [room_id], onDelete: Cascade, onUpdate: NoAction)
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([room_id], map: "idx_room_comments_room")
  @@schema("room")
}

model room_likes {
  like_id    String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  room_id    String    @db.Uuid
  user_id    String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  rooms      rooms     @relation(fields: [room_id], references: [room_id], onDelete: Cascade, onUpdate: NoAction)
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([room_id, user_id])
  @@index([room_id], map: "idx_room_likes_room")
  @@index([user_id], map: "idx_room_likes_user")
  @@schema("room")
}

model room_objects {
  object_id    String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  room_id      String     @db.Uuid
  furniture_id String     @db.Uuid
  position     Json
  rotation     Json?      @default("{}")
  scale        Json?      @default("{\"x\": 1, \"y\": 1, \"z\": 1}")
  created_at   DateTime?  @default(now()) @db.Timestamp(6)
  updated_at   DateTime?  @default(now()) @db.Timestamp(6)
  furnitures   furnitures @relation(fields: [furniture_id], references: [furniture_id], onDelete: Cascade, onUpdate: NoAction)
  rooms        rooms      @relation(fields: [room_id], references: [room_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([room_id], map: "idx_room_objects_room")
  @@schema("room")
}

model room_walls {
  wall_id    String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  room_id    String    @db.Uuid
  start_x    Decimal   @db.Decimal(10, 4)
  start_y    Decimal   @db.Decimal(10, 4)
  end_x      Decimal   @db.Decimal(10, 4)
  end_y      Decimal   @db.Decimal(10, 4)
  length     Decimal   @db.Decimal(10, 4)
  height     Decimal?  @default(2.5) @db.Decimal(6, 2)
  depth      Decimal?  @default(0.1) @db.Decimal(6, 2)
  position_x Decimal   @db.Decimal(10, 4)
  position_y Decimal?  @default(1.25) @db.Decimal(6, 2)
  position_z Decimal   @db.Decimal(10, 4)
  rotation_x Decimal?  @default(0) @db.Decimal(8, 4)
  rotation_y Decimal   @db.Decimal(8, 4)
  rotation_z Decimal?  @default(0) @db.Decimal(8, 4)
  wall_order Int?      @default(0)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  rooms      rooms     @relation(fields: [room_id], references: [room_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([room_id], map: "idx_room_walls_room")
  @@schema("room")
}

model rooms {
  room_id                    String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                    String
  title                      String          @db.VarChar(100)
  description                String?
  thumbnail_url              String?
  is_public                  Boolean?        @default(true)
  view_count                 Int?            @default(0)
  created_at                 DateTime?       @default(now()) @db.Timestamp(6)
  updated_at                 DateTime?       @default(now()) @db.Timestamp(6)
  root_room_id               String?         @db.Uuid
  collab_on                  Boolean?        @default(false)
  wall_color                 String          @default("#969593")
  floor_color                String          @default("#875F32")
  background_color           String          @default("#87CEEB")
  environment_preset         String          @default("apartment")
  collab_chat_room_id        String?         @db.Uuid
  wall_type                  String?         @default("color")
  floor_type                 String?         @default("color")
  wall_use_original_texture  Boolean         @default(false)
  floor_use_original_texture Boolean         @default(false)
  room_comments              room_comments[]
  room_likes                 room_likes[]
  room_objects               room_objects[]
  room_walls                 room_walls[]
  chat_rooms                 chat_rooms?     @relation(fields: [collab_chat_room_id], references: [chat_room_id], onUpdate: NoAction, map: "fk_rooms_collab_chat_room")
  rooms                      rooms?          @relation("roomsTorooms", fields: [root_room_id], references: [room_id], onUpdate: NoAction, map: "fk_rooms_root_room")
  other_rooms                rooms[]         @relation("roomsTorooms")
  user                       User            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([is_public], map: "idx_rooms_public")
  @@index([user_id], map: "idx_rooms_user")
  @@index([root_room_id], map: "idx_rooms_root_room_id")
  @@schema("room")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model follows {
  follow_id    String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  follower_id  String
  following_id String
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  follower     User      @relation("follows_follower", fields: [follower_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  following    User      @relation("follows_following", fields: [following_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([follower_id, following_id])
  @@index([follower_id], map: "idx_follows_follower")
  @@index([following_id], map: "idx_follows_following")
  @@schema("auth")
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String              @unique
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  accounts          Account[]
  sessions          Session[]
  following         follows[]           @relation("follows_follower")
  followers         follows[]           @relation("follows_following")
  user_achievements user_achievements[]
  chat_messages     chat_messages[]
  chat_participants chat_participants[]
  chat_rooms        chat_rooms[]
  room_comments     room_comments[]
  room_likes        room_likes[]
  rooms             rooms[]

  @@schema("auth")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@schema("auth")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("auth")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@schema("auth")
}

model achievements {
  id                String              @id @default(dbgenerated("(gen_random_uuid())::text")) @db.VarChar
  title             String              @db.VarChar
  description       String?
  category          String?             @db.VarChar
  points            Int?                @default(0)
  icon              String?             @db.VarChar
  is_active         Boolean?            @default(true)
  created_at        DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?           @default(now()) @db.Timestamptz(6)
  user_achievements user_achievements[]

  @@index([category], map: "idx_achievements_category")
  @@schema("auth")
}

model user_achievements {
  id             String       @id @default(dbgenerated("(gen_random_uuid())::text")) @db.VarChar
  user_id        String       @db.VarChar
  achievement_id String       @db.VarChar
  unlocked_at    DateTime?    @default(now()) @db.Timestamptz(6)
  achievements   achievements @relation(fields: [achievement_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_achievements_achievement_id")
  User           User         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_achievements_user_id")

  @@schema("auth")
}
